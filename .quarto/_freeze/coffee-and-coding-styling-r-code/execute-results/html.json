{
  "hash": "587d737aeed09b34cee09eefbb2437e2",
  "result": {
    "markdown": "---\ntitle: \"coffee-and-coding-styling-r-code\"\nformat: \n  revealjs:\n    theme: dark\n    code-line-numbers: false\n    # theme: blood\nexecute: \n  echo: true\n---\n\n\n# Planning (delete later)\n\n## Ideas:\n\n-   Maybe start with a badly formatted script, and go through\n    refactoring it by way of example.\n-   Ask in the chat how people would do certain things, and maybe why.\n    Or give examples and ask which they prefer.\n\n## Structure:\n\n1.  What is styling, and why is it important?\n    -   Examples (e.g. code formatting, naming things, design, comments,\n        set-up etc)\n    -   Analogies, e.g. with grammar. Makes code easier to read (for\n        others and future you) AND write.\n    -   Lots of these tips you just pick up, but it's actually worth\n        learning them. I spent the first year of coding trying to make\n        my code clear and flip-flopping between different styles. But\n        ideally, you don't want to change the way you style things -\n        consistently using a set of weird conventions is better than\n        inconsistently using good ones. But, learning good conventions\n        and using them consistently is best.\n2.  Some specific styling tips\n    -   Indentation / line breaks\n        -   Some explanation of what a code-block is. Use\n            `if`-statements.\n    -   Naming things\n        -   Don't abbreviate except in exceptional cases\n        -   Begin objects with a common prefix when it makes sense\n        -   `lower_snake_case` for object names. Exceptions? Personally,\n            no.\n        -   `Title_Snake_Case` for column names\n        -   `camelCase`/`PascalCase` should almost never be used - only\n            exception is for some object-oriented programming. If you've\n            used the {DBI} package you'll notice a lot of these\n            functions are `camelCase`.\n    -   Comments\n        -   Explain the *why*, not that *what*\n        -   Begin with a space, use sentence case\n        -   Favour infrequent, detailed comments over frequent ones\n            which don't add much\n    -   Misc:\n        -   `<-`, not `=` for assignment\n\n        -   Always space stuff out. E.g. `1/(a+b+c)` is worse than\n            `1 / (a + b + c)`\n\n        -   Don't inline curly braces\n3.  Some tools to help with styling (easy to hard)\n    -   RStudio: auto-indent, auto-rename, multiline cursor, reflow\n        comment, ctrl + f, ctrl + shift + f, rename in scope\n\n    -   {janitor} for cleaning column names\n\n    -   {styler} for restyling existing code\n\n    -   {lintr} for checking your own code\n\n# 01. What is code styling?\n\n## 'Styling' covers...\n\n::: incremental\n-   Code/project structure (e.g. `01-modelling.R` -\\> `02-plots.R` -\\>\n    `03-export.R` )\n\n-   Code formatting\n\n    -   Naming things (variables, columns, functions etc)\n    -   Indentation/line breaks/spacing\n    -   Stuff specific to R, e.g. `<-` vs `=`\n\n-   Wider *principles* like...\n\n    -   What does a good comment say?\n    -   What does a bad comment say?\n:::\n\n------------------------------------------------------------------------\n\n::: {.absolute top=\"200\"}\n> Good coding style is like correct punctuation: you can manage without\n> it, butitsuremakesthingseasiertoread\n\n\\-*Introduction to the [Tidyverse Style\nGuide](https://style.tidyverse.org/)*\n:::\n\n## Some specific benefits\n\n::: incremental\n-   Styling makes **writing** code easier\n\n-   Styling makes **reading** code easier (especially for future you!)\n\n-   Styling makes it easier to **avoid issues/bugs**\n:::\n\n# 02. Some Specific Styling Tips\n\n## Naming things\n\n::: {style=\"font-size:70%\"}\n::: incremental\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-2\"}\n# snake_case\niris_summary <- summary(iris)\n\n# Title_Snake_Case\nIris_Summary <- summary(iris)\n\n# camelCase\nirisSummary <- summary(iris)\n\n# PascalCase\nIrisSummary <- summary(iris)\n\n# SCREAMING_SNAKE_CASE\nIRIS_SUMMARY <- summary(iris)\n```\n:::\n\n\n-   Consistency should be prioritised above all else, but...\n-   `lower_snake_case` should be preferred in most cases\n-   `Title_Snake_Case` works well for column names\n-   You might see `camelCase` in other packages, but you shouldn't use\n    it unless you're doing serious object-oriented programming\n:::\n:::\n\n::: notes\n-   Exceptions to the `lower_snake_case` rule? Personally, no. I find,\n    even with acronyms etc, things are much simpler if you follow this\n    rule religiously.\n:::\n\n## ...But *what* to name things?\n\n::: {style=\"font-size:70%\"}\n-   Keep names as short as you can *while still being descriptive.*\n    Prioritise being descriptive!\n-   Only use abbreviations in exceptional cases\n-   Don't use the name to signal the *type* of the object\n\n::: columns\n::: {.column width=\"50%\"}\n### Bad\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_totalcost <- costs %>% \n  group_by(Category) %>% \n  summarise(Cost = sum(Cost))\n\nmodel_for_use_later_on <- lm(Cost ~ Time, data = costs)\n\nread_data_func <- function(path) {\n  readr::read_csv(\n    path, \n    id = \"filepath\", \n    na = \"unknown\"\n  )\n}\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n### Good\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncost_totals <- costs %>% \n  group_by(Category) %>% \n  summarise(Cost = sum(Cost))\n\ncost_model <- lm(Cost ~ Time, data = costs)\n\nread_data <- function(path) {\n  readr::read_csv(\n    path, \n    id = \"filepath\",\n    na = \"unknown\"\n  )\n}\n```\n:::\n\n:::\n:::\n:::\n\n## Indentation\n\n::: {style=\"font-size:70%\"}\n\n-   *Question:* Why indent?\n-   *Answer:* It makes it much easier to infer context\n\n::: columns\n::: {.column width=\"50%\"}\n### Bad\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  iris %>% \n mutate(\nSepal.Area = Sepal.Width * Sepal.Length,\n  Petal.Area = Petal.Width * Petal.Length\n  ) %>% \ngroup_by(\nSpecies\n  ) %>% \n    summarise(\nPetal.Area = mean(Petal.Area),\n   Petal.Area = mean(Petal.Area)\n)\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n### Good\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% \n  mutate(\n    Sepal.Area = Sepal.Width * Sepal.Length,\n    Petal.Area = Petal.Width * Petal.Length\n  ) %>% \n  group_by(\n    Species\n  ) %>% \n  summarise(\n    Petal.Area = mean(Petal.Area),\n    Petal.Area = mean(Petal.Area)\n  )\n```\n:::\n\n:::\n:::\n\n:::\n",
    "supporting": [
      "coffee-and-coding-styling-r-code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}