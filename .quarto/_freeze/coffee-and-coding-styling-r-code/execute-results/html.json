{
  "hash": "9ba03d83727c0e732527543605ee52e5",
  "result": {
    "markdown": "---\ntitle: \"Styling R Code\"\nformat: \n  revealjs:\n    theme: dark\n    code-line-numbers: false\nexecute: \n  echo: true\nhighlight-style: arrow\n---\n\n\n<!-- # Planning (delete later) -->\n\n<!-- ## Ideas: -->\n\n<!-- -   Maybe start with a badly formatted script, and go through -->\n\n<!--     refactoring it by way of example. -->\n\n<!-- -   Ask in the chat how people would do certain things, and maybe why. -->\n\n<!--     Or give examples and ask which they prefer. -->\n\n<!-- ## Structure: -->\n\n<!-- 1.  What is styling, and why is it important? -->\n\n<!--     -   Examples (e.g. code formatting, naming things, design, comments, -->\n\n<!--         set-up etc) -->\n\n<!--     -   Analogies, e.g. with grammar. Makes code easier to read (for -->\n\n<!--         others and future you) AND write. -->\n\n<!--     -   Lots of these tips you just pick up, but it's actually worth -->\n\n<!--         learning them. I spent the first year of coding trying to make -->\n\n<!--         my code clear and flip-flopping between different styles. But -->\n\n<!--         ideally, you don't want to change the way you style things - -->\n\n<!--         consistently using a set of weird conventions is better than -->\n\n<!--         inconsistently using good ones. But, learning good conventions -->\n\n<!--         and using them consistently is best. -->\n\n<!-- 2.  Some specific styling tips -->\n\n<!--     -   Indentation / line breaks -->\n\n<!--         -   Some explanation of what a code-block is. Use -->\n\n<!--             `if`-statements. -->\n\n<!--     -   Naming things -->\n\n<!--         -   Don't abbreviate except in exceptional cases -->\n\n<!--         -   Begin objects with a common prefix when it makes sense -->\n\n<!--         -   `lower_snake_case` for object names. Exceptions? Personally, -->\n\n<!--             no. -->\n\n<!--         -   `Title_Snake_Case` for column names -->\n\n<!--         -   `camelCase`/`PascalCase` should almost never be used - only -->\n\n<!--             exception is for some object-oriented programming. If you've -->\n\n<!--             used the {DBI} package you'll notice a lot of these -->\n\n<!--             functions are `camelCase`. -->\n\n<!--         -   File names? -->\n\n<!--     -   Comments -->\n\n<!--         -   Explain the *why*, not that *what* -->\n\n<!--         -   Begin with a space, use sentence case -->\n\n<!--         -   Favour infrequent, detailed comments over frequent ones -->\n\n<!--             which don't add much -->\n\n<!--     -   Misc: -->\n\n<!--         -   `<-`, not `=` or `->` for assignment -->\n\n<!--         -   Always space stuff out. E.g. `1/(a+b+c)` is worse than -->\n\n<!--             `1 / (a + b + c)`. -->\n\n<!--         -   Don't inline curly braces -->\n\n<!--         -    -->\n\n<!-- 3.  Some tools to help with styling (easy to hard) -->\n\n<!--     -   RStudio: auto-indent, auto-rename, multiline cursor, reflow -->\n\n<!--         comment, ctrl + f, ctrl + shift + f, rename in scope -->\n\n<!--     -   {janitor} for cleaning column names -->\n\n<!--     -   {styler} for restyling existing code -->\n\n<!--     -   {lintr} for checking your own code -->\n\n<!--     -   {codegrip} for reshaping code -->\n\n# 01. What is code styling?\n\n## 'Styling' covers...\n\n::: {.incremental style=\"font-size:80%\"}\n-   Code/project structure (e.g. `01-modelling.R` -\\> `02-plots.R` -\\>\n    `03-export.R` )\n\n-   Code formatting\n\n    -   Naming things (variables, columns, functions etc)\n    -   Indentation/line breaks/spacing\n    -   Stuff specific to R, e.g. `<-` vs `=`\n\n-   Wider *principles* like...\n\n    -   What does a good comment say?\n    -   What is good code design?\n\n-   Styling is about making your work easy to understand without\n    changing its function\n:::\n\n------------------------------------------------------------------------\n\n::: {.absolute top=\"200\"}\n> Good coding style is like correct punctuation: you can manage without\n> it, butitsuremakesthingseasiertoread\n\n\\-*Introduction to the [Tidyverse Style\nGuide](https://style.tidyverse.org/)*\n:::\n\n## Some specific benefits\n\n::: {.incremental style=\"font-size:70%}\n-   Styling makes *writing* code easier (less decisions to make)\n\n-   Styling makes *reading* code easier\n\n-   Styling makes it easier to *avoid bugs*\n\n::: {.columns}\n\n::: {.fragment .column width=50%}\n![Without styling](cat-crying.gif){height=200}\n:::\n\n::: {.fragment .column width=50%}\n![With styling](cat-typing.gif){height=200}\n:::\n\n:::\n\n:::\n\n# 02. Some specific styling tips\n\n## Naming things\n\n::: {style=\"font-size:70%\"}\n-   Keep names as short as you can *while still being descriptive*.\n    Prioritise being descriptive!\n-   Only use abbreviations in special cases, e.g. acronyms\n-   Don't use the name to signal the *type* of the object\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell filename='Bad'}\n\n```{.r .cell-code}\ntable_totalcost <- costs %>% \n  group_by(Category) %>% \n  summarise(Cost = sum(Cost))\n\nmodel_for_use_later_on <- lm(Cost ~ Time, data = costs)\n\nread_data_func <- function(path) {\n  readr::read_csv(\n    path, \n    id = \"filepath\", \n    na = \"unknown\"\n  )\n}\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell filename='Good'}\n\n```{.r .cell-code}\ncost_totals <- costs %>% \n  group_by(Category) %>% \n  summarise(Cost = sum(Cost))\n\ncost_model <- lm(Cost ~ Time, data = costs)\n\nread_data <- function(path) {\n  readr::read_csv(\n    path, \n    id = \"filepath\",\n    na = \"unknown\"\n  )\n}\n```\n:::\n\n:::\n:::\n\n-   Names for things like dataframes, vectors, values etc should be\n    noun-like, e.g. `costs`, `costs_summary`, `costs_uplift_factor` etc\n\n-   Names for functions should be verb-like, e.g. `filter()`,\n    `standardise_names()` , `extract_coefficients()` etc\n:::\n\n## Name *case*\n\n::: {style=\"font-size:70%\"}\n::: incremental\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-2\"}\n# snake_case\niris_summary <- summary(iris)\n\n# Title_Snake_Case\nIris_Summary <- summary(iris)\n\n# camelCase\nirisSummary <- summary(iris)\n\n# PascalCase\nIrisSummary <- summary(iris)\n\n# SCREAMING_SNAKE_CASE\nIRIS_SUMMARY <- summary(iris)\n```\n:::\n\n\n-   Consistency should be prioritised above all else, but...\n-   `lower_snake_case` should be preferred in most cases\n-   `Title_Snake_Case` works well for column names\n-   You might see `camelCase` in other packages, but you shouldn't use\n    it unless you're doing serious object-oriented programming\n:::\n:::\n\n::: notes\n-   Exceptions to the `lower_snake_case` rule? Personally, no. I find,\n    even with acronyms etc, things are much simpler if you follow this\n    rule religiously.\n:::\n\n## Syntactic names\n\n::: {.incremental style=\"font-size:70%\"}\nR has rules for names:\n\n-   They must only include letters and numbers, and must start with a\n    letter\n\n-   Other names must be surrounded by backticks:\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|4-5|7-8|10-11|1-11\"}\n# Good ('syntactic')\niris_proportions <- mutate(iris, across(1:4, ~ . / sum(.)))\n\n# Bad: starts with a number\n`01_iris_proportions` <- mutate(iris, across(1:4, ~ . / sum(.)))\n\n# Bad: contains a non-alphanumeric character\n`iris_%s` <- mutate(iris, across(1:4, ~ . / sum(.)))\n\n# Bad: contains a space\n`iris proportions` <- mutate(iris, across(1:4, ~ . / sum(.)))\n```\n:::\n\n:::\n\n-   When your data has non-syntactic column names, **clean these up\n    ASAP!**\n    \n-   While names like `my.data` are allowed, avoid this naming style. Use \n    `my_data` instead.\n:::\n\n## Indentation\n\n::: {.incremental style=\"font-size:70%\"}\n::: columns\n::: {.column width=\"40%\"}\n-   *Question:* Why indent?\n-   *Answer:* Indentation shows **code structure** at a glance\n-   Whenever you increase indentation, **do it by exactly 2 spaces**\n-   This usually means that **all function arguments should have their\n    own line**\n:::\n\n::: {.column width=\"60%\"}\n::: fragment\n\n::: {.cell filename='Bad'}\n\n```{.r .cell-code}\n iris %>% \n dplyr::mutate(Sepal.Area = Sepal.Width * Sepal.Length,\n   Petal.Area = Petal.Width * Petal.Length) %>% \n  ggplot2::ggplot(aes(x = Sepal.Area, \ny = Petal.Area, colour = Species)) +\n  ggplot2::geom_point()\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell filename='Better'}\n\n```{.r .cell-code}\niris %>% \n  dplyr::mutate(Sepal.Area = Sepal.Width * Sepal.Length,\n                Petal.Area = Petal.Width * Petal.Length) %>% \n  ggplot2::ggplot(aes(x = Sepal.Area, \n                      y = Petal.Area, \n                      colour = Species)) +\n  ggplot2::geom_point()\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell filename='Best'}\n\n```{.r .cell-code}\niris %>% \n  dplyr::mutate(\n    Sepal.Area = Sepal.Width * Sepal.Length,\n    Petal.Area = Petal.Width * Petal.Length\n  ) %>% \n  ggplot2::ggplot(aes(\n    x = Sepal.Area, \n    y = Petal.Area, \n    colour = Species\n  )) +\n  ggplot2::geom_point()\n```\n:::\n\n:::\n:::\n:::\n:::\n\n## Comments: what should they say?\n\n::: {.incremental style=\"font-size:70%\"}\n::: columns\n::: {.column width=\"40%\"}\n-   **Question:** How much should you comment?\n-   **Answer:** As much as needed, *but no more*\n\n::: fragment\nIf a comment is needed, it should explain the *why*, not the\n*what*/*how* (if *what* your code does isn't clear, you should probably\nrewrite it).\n:::\n:::\n\n::: {.column width=\"60%\"}\n::: fragment\n\n::: {.cell filename='Bad'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  \n  # Reorder car levels by values of mpg\n  mutate(\n    car = fct_reorder(car, mpg)\n  )\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell filename='Good'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  \n  # Order cars by efficiency (mpg) for plotting later\n  mutate(\n    car = fct_reorder(car, mpg)\n  )\n```\n:::\n\n:::\n:::\n:::\n:::\n\n## Comments: maximising clarity\n\n::: {.incremental style=\"font-size:70%\"}\n::: columns\n::: {.column width=\"40%\"}\n1.  Number your comments if it makes sense\n2.  Prefer infrequent, detailed comments over frequent ones which are\n    overly terse\n3.  Fencing code blocks guides the reader to the most important\n    information\n:::\n\n::: {.column width=\"60%\"}\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- mtcars %>% \n  \n  # 1. Create a column for the car name\n  rownames_to_column(\"car\") %>% \n  \n  # 2. Apply tibble format for nicer printing\n  as_tibble() %>% \n  \n  # 3. Order cars by efficiency (mpg) for plotting later\n  mutate(car = fct_reorder(car, mpg))\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create a column for the car name\n# 2. Apply tibble format for nicer printing\n# 3. Order cars by efficiency (mpg) for plotting later\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  mutate(car = fct_reorder(car, mpg))\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell highlight-style='atom-one'}\n\n```{.r .cell-code}\n# ~~ Prepare data for plotting ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# 1. Create a column for the car name\n# 2. Apply tibble format for nicer printing\n# 3. Order cars by efficiency (mpg) for plotting later\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  mutate(car = fct_reorder(car, mpg))\n```\n:::\n\n:::\n:::\n:::\n:::\n\n## Comments: miscellaneous tips\n\n::: {style=\"font-size:70%\"}\n-   Give each comment its own line unless there's a *really* good reason\n    not to\n\n-   Don't needlessly abbreviate things - use full sentences\n\n-   Use the [*imperative\n    mood*](https://en.wikipedia.org/wiki/Grammatical_mood) for short\n    comments:\n\n    -   Good (imperative mood):\n\n        `# Remove rows where Cost is NA`\n\n    -   Bad (indicative mood?):\n\n        `# Removing rows where Cost is NA`\n\n-   If your code is more than 50% comments consider switching to\n    Quarto/R Markdown\n:::\n\n## More miscellaneous tips\n\n::: {.incremental style=\"font-size:70%\"}\n-   Always use `<-` for assignment, not `=` or `->`\n\n-   You should (almost) never use `<<-` - there's (almost) always a\n    better approach\n\n-   Space stuff out! E.g. `1 / (a + b + c)` is better than `1/(a+b+c)`\n\n-   Don't use `return()` if you don't need to\n\n-   **Rewrite your code!** Code you write once and never change isn't\n    likely to be very clear.\n:::\n\n# 03. Design (is this styling?)\n\nIdeas:\n\n-   How to avoid repetition\n\n-   How to write and use functions\n\n-   How to use multiple files\n\n# 04. Some useful tools\n\n## `janitor::clean_names()`\n\n::: {.columns style=\"font-size:69%\"}\n\n::: {.column width=30%}\n*   `clean_names()` is a very quick and easy way to make\n    syntactic column names. Use it!\n    \n*   Getting Title_Snake_Case is possible, but not obvious from the documentation\n\n*   Cleaning is lossy, so check the result\n:::\n\n::: {.column width=70%}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|9,16,23\"}\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(janitor)\n\nrelig_income_small <- relig_income %>% select(-(2:7)) %>% head(2)\n\nrelig_income_small\n#>  # A tibble: 2 × 5\n#>    religion `$75-100k` `$100-150k` `>150k` `Don't know/refused`\n#>    <chr>         <dbl>       <dbl>   <dbl>                <dbl>\n#>  1 Agnostic        122         109      84                   96\n#>  2 Atheist          73          59      74                   76\n\nrelig_income_small %>% clean_names()\n#>  # A tibble: 2 × 5\n#>    religion x75_100k x100_150k x150k dont_know_refused\n#>    <chr>       <dbl>     <dbl> <dbl>             <dbl>\n#>  1 Agnostic      122       109    84                96\n#>  2 Atheist        73        59    74                76\n\nrelig_income_small %>% clean_names(case = \"title\", sep_out = \"_\")\n#>  # A tibble: 2 × 5\n#>    Religion X75_100k X100_150k X150k Dont_Know_Refused\n#>    <chr>       <dbl>     <dbl> <dbl>             <dbl>\n#>  1 Agnostic      122       109    84                96\n#>  2 Atheist        73        59    74                76\n```\n:::\n\n:::\n\n:::\n",
    "supporting": [
      "coffee-and-coding-styling-r-code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}