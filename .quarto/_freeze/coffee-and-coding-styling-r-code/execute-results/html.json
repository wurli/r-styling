{
  "hash": "8921a1dd64e66ff8d925e7dc59be99ce",
  "result": {
    "markdown": "---\ntitle: \"Styling R Code\"\nformat: \n  revealjs:\n    theme: [dark, custom.scss]\n    code-line-numbers: false\nexecute: \n  echo: true\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#> \"\nhighlight-style: arrow\n---\n\n\n# 01. What is code styling?\n\n## 'Styling' covers...\n\n::: {.incremental style=\"font-size:80%\"}\n-   Code/project structure (e.g. `01-modelling.R` -\\> `02-plots.R` -\\>\n    `03-export.R` )\n\n-   Code formatting\n\n    -   Naming things (variables, columns, functions etc)\n    -   Indentation/line breaks/spacing\n    -   Stuff specific to R, e.g. `<-` vs `=`\n\n-   Wider *principles* like...\n\n    -   What does a good comment say?\n    -   What is good code design?\n\n-   Styling is about making your work easy to understand without\n    changing its function\n:::\n\n------------------------------------------------------------------------\n\n::: {.absolute top=\"200\"}\n> Good coding style is like correct punctuation: you can manage without\n> it, butitsuremakesthingseasiertoread\n\n\\-*Introduction to the [Tidyverse Style\nGuide](https://style.tidyverse.org/)*\n:::\n\n## Some specific benefits\n\n::: {.incremental style=\"\\\"font-size:70%\"}\n-   Styling makes *writing* code easier (less decisions to make)\n\n-   Styling makes *reading* code easier\n\n-   Styling makes it easier to *avoid bugs*\n\n::: columns\n::: {.fragment .column width=\"50%\"}\n![Without styling](cat-crying.gif){height=\"200\"}\n:::\n\n::: {.fragment .column width=\"50%\"}\n![With styling](cat-typing.gif){height=\"200\"}\n:::\n:::\n:::\n\n## My styling journey\n\n::: {.incremental style=\"font-size:65%\"}\n-   *2019*: Started coding in R\n\n    -   Struggled to write clear code\n    -   Often got frustrated by needing to rewrite stuff\n\n-   *2020-2021*: Had *some* kind of set of conventions specific to\n    myself\n\n    -   Would occasionally change how I did something\n    -   This made me dislike all the code I'd written previously\n    -   This made me feel sad\n\n-   *2022*: Started religiously following the [Tidyverse style\n    guide](https://style.tidyverse.org/)\n\n    -   My code needed less rewrites\n    -   I spent almost no time thinking about styling (just design)\n    -   My code was clearer\n    -   This made me feel happy\n\n-   *2023*: Life is great\n:::\n\n# 02. Some specific styling tips\n\n## Naming things\n\n::: {.incremental style=\"font-size:70%\"}\n-   Keep names as short as you can *while still being descriptive*.\n    Prioritise being descriptive!\n-   Only use abbreviations in special cases, e.g. acronyms\n-   Don't use the name to signal the *type* of the object\n\n::: {.fragment .columns}\n::: {.column width=\"50%\"}\n\n::: {.cell filename='Bad'}\n\n```{.r .cell-code}\ntable_totalcost <- costs %>% \n  group_by(Category) %>% \n  summarise(Cost = sum(Cost))\n\nmodel_for_use_later_on <- lm(Cost ~ Time, data = costs)\n\nread_data_func <- function(path) {\n  readr::read_csv(path, id = \"filepath\", na = \"N/A\")\n}\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell filename='Good'}\n\n```{.r .cell-code}\ncost_totals <- costs %>% \n  group_by(Category) %>% \n  summarise(Cost = sum(Cost))\n\ncost_model <- lm(Cost ~ Time, data = costs)\n\nread_data <- function(path) {\n  readr::read_csv(path, id = \"filepath\", na = \"N/A\")\n}\n```\n:::\n\n:::\n:::\n\n-   Names for things like dataframes, vectors, values etc should be\n    noun-like, e.g. `costs`, `costs_summary`, `costs_uplift_factor` etc\n\n-   Names for functions should be verb-like, e.g. `filter()`,\n    `standardise_names()` , `extract_coefficients()` etc\n:::\n\n## Name *case*\n\n::: {style=\"font-size:70%\"}\n::: incremental\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-2\"}\n# snake_case\niris_summary <- summary(iris)\n\n# Title_Snake_Case\nIris_Summary <- summary(iris)\n\n# camelCase\nirisSummary <- summary(iris)\n\n# PascalCase\nIrisSummary <- summary(iris)\n\n# SCREAMING_SNAKE_CASE\nIRIS_SUMMARY <- summary(iris)\n```\n:::\n\n\n-   Consistency should be prioritised above all else, but...\n-   `lower_snake_case` should be preferred in most cases\n-   `Title_Snake_Case` works well for column names\n-   You might see `camelCase` in other packages, but you shouldn't use\n    it unless you're doing serious object-oriented programming\n:::\n:::\n\n::: notes\n-   Exceptions to the `lower_snake_case` rule? Personally, no. I find,\n    even with acronyms etc, things are much simpler if you follow this\n    rule religiously.\n:::\n\n## Syntactic names\n\n::: {.incremental style=\"font-size:70%\"}\nR has rules for names:\n\n-   They must only include letters and numbers, and must start with a\n    letter\n\n-   Other names must be surrounded by backticks:\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1-2|4-5|7-8|10-11|1-11\"}\n# Good ('syntactic')\niris_proportions <- mutate(iris, across(1:4, ~ . / sum(.)))\n\n# Bad: starts with a number\n`01_iris_proportions` <- mutate(iris, across(1:4, ~ . / sum(.)))\n\n# Bad: contains a non-alphanumeric character\n`iris_%s` <- mutate(iris, across(1:4, ~ . / sum(.)))\n\n# Bad: contains a space\n`iris proportions` <- mutate(iris, across(1:4, ~ . / sum(.)))\n```\n:::\n\n:::\n\n-   When your data has non-syntactic column names, **clean these up\n    ASAP!**\n\n-   While names like `my.data` are allowed, avoid this naming style. Use\n    `my_data` instead.\n:::\n\n## Indentation\n\n::: {.incremental style=\"font-size:70%\"}\n::: columns\n::: {.column width=\"40%\"}\n-   *Question:* Why indent?\n-   *Answer:* Indentation shows **code structure** at a glance\n-   Whenever you increase indentation, **do it by exactly 2 spaces**\n-   This usually means that **all function arguments should have their\n    own line**\n:::\n\n::: {.column width=\"60%\"}\n::: fragment\n\n::: {.cell filename='Bad'}\n\n```{.r .cell-code}\n iris %>% \n dplyr::mutate(Sepal.Area = Sepal.Width * Sepal.Length,\n   Petal.Area = Petal.Width * Petal.Length) %>% \n  ggplot2::ggplot(aes(x = Sepal.Area, \ny = Petal.Area, colour = Species)) +\n  ggplot2::geom_point()\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell filename='Better'}\n\n```{.r .cell-code}\niris %>% \n  dplyr::mutate(Sepal.Area = Sepal.Width * Sepal.Length,\n                Petal.Area = Petal.Width * Petal.Length) %>% \n  ggplot2::ggplot(aes(x = Sepal.Area, \n                      y = Petal.Area, \n                      colour = Species)) +\n  ggplot2::geom_point()\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell filename='Best'}\n\n```{.r .cell-code}\niris %>% \n  dplyr::mutate(\n    Sepal.Area = Sepal.Width * Sepal.Length,\n    Petal.Area = Petal.Width * Petal.Length\n  ) %>% \n  ggplot2::ggplot(aes(\n    x = Sepal.Area, \n    y = Petal.Area, \n    colour = Species\n  )) +\n  ggplot2::geom_point()\n```\n:::\n\n:::\n:::\n:::\n:::\n\n## Comments: what should they say?\n\n::: {.incremental style=\"font-size:70%\"}\n::: columns\n::: {.column width=\"40%\"}\n-   **Question:** How much should you comment?\n-   **Answer:** As much as needed, *but no more*\n\n::: fragment\nIf a comment is needed, it should explain the *why*, not the\n*what*/*how* (if *what* your code does isn't clear, you should probably\nrewrite it).\n:::\n:::\n\n::: {.column width=\"60%\"}\n::: fragment\n\n::: {.cell filename='Bad'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  \n  # Reorder car levels by values of mpg\n  mutate(\n    car = fct_reorder(car, mpg)\n  )\n```\n:::\n\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: fragment\n\n::: {.cell filename='Good'}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  \n  # Order cars by efficiency (mpg) for plotting later\n  mutate(\n    car = fct_reorder(car, mpg)\n  )\n```\n:::\n\n:::\n:::\n:::\n:::\n\n## Comments: maximising clarity\n\n::: {.incremental style=\"font-size:70%\"}\n::: {.fragment .columns}\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_data <- mtcars %>% \n  \n  # 1. Create a column for the car name\n  rownames_to_column(\"car\") %>% \n  \n  # 2. Apply tibble format for nicer printing\n  as_tibble() %>% \n  \n  # 3. Order cars by efficiency (mpg) for plotting later\n  mutate(car = fct_reorder(car, mpg))\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\nNumber your comments if it makes sense\n:::\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: {.fragment .columns}\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Create a column for the car name\n# 2. Apply tibble format for nicer printing\n# 3. Order cars by efficiency (mpg) for plotting later\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  mutate(car = fct_reorder(car, mpg))\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\nPrefer infrequent, detailed comments over frequent ones which are overly\nterse\n:::\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: {.fragment .columns}\n::: {.column width=\"60%\"}\n\n::: {.cell highlight-style='atom-one'}\n\n```{.r .cell-code}\n# ~~ Prepare data for plotting ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# 1. Create a column for the car name\n# 2. Apply tibble format for nicer printing\n# 3. Order cars by efficiency (mpg) for plotting later\n# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nplot_data <- mtcars %>% \n  rownames_to_column(\"car\") %>% \n  as_tibble() %>% \n  mutate(car = fct_reorder(car, mpg))\n```\n:::\n\n:::\n\n::: {.column width=\"40%\"}\nFencing comments suggests a new 'section'. This can help guide the\nreader to the most important information.\n:::\n:::\n:::\n\n## Comments: miscellaneous tips\n\n::: {style=\"font-size:70%\"}\n-   Give each comment its own line unless there's a *really* good reason\n    not to\n\n-   Don't needlessly abbreviate things - use full sentences\n\n-   Use the [*imperative\n    mood*](https://en.wikipedia.org/wiki/Grammatical_mood) for short\n    comments:\n\n    -   Good (imperative mood):\n\n        `# Remove rows where Cost is NA`\n\n    -   Bad (indicative mood?):\n\n        `# Removing rows where Cost is NA`\n\n-   If your code is more than 50% comments consider switching to\n    Quarto/R Markdown\n:::\n\n## Functions\n\n::: {.incremental style=\"font-size:70%\"}\n-   Repeating code is bad - defining functions is the answer\n\n-   This takes practice but makes code *much* easier to read and\n    maintain\n\n::: columns\n::: {.fragment .column width=\"53%\"}\n\n::: {.cell filename='Bad'}\n\n```{.r .cell-code  code-line-numbers=\"|7\"}\n# Rescale a, b, c, and d to be between 0 and 1\ndf %>% \n  mutate(\n    a = (a - min(a, na.rm = TRUE)) / \n      (max(a, na.rm = TRUE) - min(a, na.rm = TRUE)),\n    b = (b - min(b, na.rm = TRUE)) / \n      (max(b, na.rm = TRUE) - min(a, na.rm = TRUE)),\n    c = (c - min(c, na.rm = TRUE)) / \n      (max(c, na.rm = TRUE) - min(c, na.rm = TRUE)),\n    d = (d - min(d, na.rm = TRUE)) / \n      (max(d, na.rm = TRUE) - min(d, na.rm = TRUE)),\n  )\n```\n:::\n\n:::\n\n::: {.fragment .column width=\"47%\"}\n\n::: {.cell filename='Better'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nrescale01 <- function(x) {\n  rng <- range(x, na.rm = TRUE, finite = TRUE)\n  (x - min(x)) / (max(x) - min(x))\n}\n\ndf %>% \n  mutate(\n    a = rescale01(a),\n    b = rescale01(b),\n    c = rescale01(c),\n    d = rescale01(d)\n  )\n```\n:::\n\n:::\n:::\n\n::: {style=\"font-size:5%\"}\n\\\n:::\n\n::: columns\n::: {.fragment .column width=\"53%\"}\n\n::: {.cell filename='Best'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\n# across() applies rescale01() to columns a to d\n# This finally eliminates all code repetition!\ndf %>% \n  mutate(across(c(a, b, c, d), rescale01))\n```\n:::\n\n:::\n\n<!-- Need a hidden column here to get the others to vertically align -->\n\n::: {.column width=\"47%\"}\n::: content-hidden\n\n::: {.cell filename='Best'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\ndf %>%\n  mutate(across(a:d, rescale01))\n```\n:::\n\n:::\n:::\n:::\n:::\n\n## Files\n\n## More miscellaneous tips\n\n::: {.incremental style=\"font-size:70%\"}\n-   Always use `<-` for assignment, not `=` or `->`\n\n-   You should (almost) never use `<<-` - there's (almost) always a\n    better approach\n\n-   Space stuff out! E.g. `1 / (a + b + c)` is better than `1/(a+b+c)`\n\n-   Don't use `return()` if you don't need to\n\n-   **Rewrite your code!** Code you write once and never change isn't\n    likely to be very clear.\n:::\n\n# 03. Code Design\n\n## What is design?\n\n::: {.incremental style=\"font-size:70%\"}\n-   Design is about making your code consistent, composable and reusable\n\n-   Styling can be boiled down to a set of rules - design is more of an\n    art\n\n-   In R, good code design is mostly about writing good functions\n\n::: fragment\nExample: `dplyr::select()` is a masterclass in design:\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nall_cols   <- colnames(iris)\nsepal_cols <- all_cols[startsWith(all_cols, \"Sepal\")]\niris_small <- iris[c(\"Species\", sepal_cols)]\n\nhead(iris_small, 5)\n#>    Species Sepal.Length Sepal.Width\n#>  1  setosa          5.1         3.5\n#>  2  setosa          4.9         3.0\n#>  3  setosa          4.7         3.2\n#>  4  setosa          4.6         3.1\n#>  5  setosa          5.0         3.6\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\niris %>% \n  select(Species, starts_with(\"Sepal\")) %>% \n  head(5)\n#>    Species Sepal.Length Sepal.Width\n#>  1  setosa          5.1         3.5\n#>  2  setosa          4.9         3.0\n#>  3  setosa          4.7         3.2\n#>  4  setosa          4.6         3.1\n#>  5  setosa          5.0         3.6\n```\n:::\n\n:::\n:::\n:::\n\n::: fragment\nBoth code chunks take the `iris` dataframe and select the `Species`\ncolumn plus all columns which begin with `\"Sepal\"`. Which is clearer?\n:::\n:::\n\n# 04. Some useful tools\n\n## `janitor::clean_names()`\n\n::: {.columns style=\"font-size:69%\"}\n::: {.column width=\"30%\"}\n-   `clean_names()` is a very quick and easy way to make syntactic\n    column names. Use it!\n\n-   Getting Title_Snake_Case is possible, but not obvious from the\n    documentation\n\n-   Cleaning is lossy, so check the result\n:::\n\n::: {.column width=\"70%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|9-10,14-16,20-22\"}\nmessy_df <- data.frame(\n  pupilNumber      = 1:2, \n  `cost 2022`      = 1234, \n  `% totalFunding` = c(0.4, 0.6),\n  `<50% funding`   = c(TRUE, FALSE), \n  check.names = FALSE\n)\n\nmessy_df\n#>    pupilNumber cost 2022 % totalFunding <50% funding\n#>  1           1      1234            0.4         TRUE\n#>  2           2      1234            0.6        FALSE\n\nmessy_df %>% \n  janitor::clean_names()\n#>    pupil_number cost_2022 percent_total_funding x50_percent_funding\n#>  1            1      1234                   0.4                TRUE\n#>  2            2      1234                   0.6               FALSE\n\nmessy_df %>% \n  janitor::clean_names(case = \"title\", sep_out = \"_\")\n#>    Pupil_Number Cost_2022 Percent_Total_Funding X50_Percent_Funding\n#>  1            1      1234                   0.4                TRUE\n#>  2            2      1234                   0.6               FALSE\n```\n:::\n\n:::\n:::\n\n## `styler::style_file()`\n\n::: {style=\"font-size:70%\"}\n[{styler}](https://styler.r-lib.org/) is a powerful tool to use\nsparingly. Some reasonable use-cases:\n\n-   Re-style a project you inherit\n\n-   Re-style your own old projects after seeing this presentation\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell filename='messy-code.R' file='messy-code.R'}\n\n```{.r .cell-code}\n#load packages\nlibrary(tidyverse);library(lubridate)\n\ndata_raw=read_csv(  \"some_file.csv\"  )\n\ndata_clean<-data_raw %>%\n  mutate(Amount=Amount/sum(Amount),\n    #Combine date parts into single column\n    Date=make_date(Year,   Month,Day))%>%\n    filter(\n  # other years aren't relevant to analysis\n          year(Date)==2020,\n          Amount> 0.1\n    )\n\nggplot2(data_clean,aes(Date,Amount))+geom_line()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell filename='styler::style_file(\"messy-code.R\")'}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(lubridate)\n\ndata_raw <- read_csv(\"some_file.csv\")\n\ndata_clean <- data_raw %>%\n  mutate(\n    Amount = Amount / sum(Amount),\n    # Combine date parts into single column\n    Date = make_date(Year, Month, Day)\n  ) %>%\n  filter(\n    # other years aren't relevant to analysis\n    year(Date) == 2020,\n    Amount > 0.1\n  )\n\nggplot2(data_clean, aes(Date, Amount)) + geom_line()\n```\n:::\n\n:::\n:::\n:::\n\n## `lintr::lint_file()`\n\n::: {style=\"font-size:70%\"}\n[{lintr}](https://lintr.r-lib.org/) is similar to {styler}, but it tells\nyou about issues instead of fixing them.\n\n-   Good for maintaining already well-styled code, not so good for\n    restyling old code\n\n-   Highly customisable, e.g. if you want to relax/not apply some rules\n\n-   RStudio's UI lets you click through to address individual lints\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell filename='messy-code.R' file='messy-code.R'}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\n#load packages\nlibrary(tidyverse);library(lubridate)\n\ndata_raw=read_csv(  \"some_file.csv\"  )\n\ndata_clean<-data_raw %>%\n  mutate(Amount=Amount/sum(Amount),\n    #Combine date parts into single column\n    Date=make_date(Year,   Month,Day))%>%\n    filter(\n  # other years aren't relevant to analysis\n          year(Date)==2020,\n          Amount> 0.1\n    )\n\nggplot2(data_clean,aes(Date,Amount))+geom_line()\n```\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlintr::lint_file(\"messy-code.R\")\n```\n:::\n\n\n![](lintr-rstudio-screenshot.png)\n:::\n:::\n:::\n\n## Built-in tools in RStudio\n\n::: {style=\"font-size:70%\"}\n| Shortcut                 | Action                                             |\n|---------------------------|---------------------------------------------|\n| `Ctrl + I`               | Correct indentation                                |\n| `Alt + Ctrl + Shift + M` | 'Rename in scope', e.g. change `myVar` to `my_var` |\n| `Ctrl + Shift + F`       | Find (and replace) throughout multiple files       |\n| `Ctrl + Shift + /`       | Wrap long comments over multiple lines             |\n| `Alt + -`                | Insert `<-` with the correct spacing               |\n| `Ctrl + Shift + M`       | Insert `%>%` with the correct spacing              |\n| `Alt + Ctrl + Shift + R` | Inserts template function documentation            |\n| `Ctrl + click/drag`      | Activate multiline cursor                          |\n\nNote: You can use Tools -\\> Keyboard Shortcuts Help for a full list of\nshortcuts\n:::\n\n# 05. Resources\n\n## Resources\n\n-   The Tidyverse style guide: <https://style.tidyverse.org/>\n\n-   The Tidyverse design guide: <https://design.tidyverse.org/>\n\n-   The {styler} package: <https://styler.r-lib.org/>\n\n-   The {lintr} package: <https://lintr.r-lib.org/>\n",
    "supporting": [
      "coffee-and-coding-styling-r-code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}