install.packages("tidyr")
install.packages("tidyr")
ls(as.environment("package:tidyr"))
ls(envir = as.environment("package:tidyr"))
ls(envir = asNamespace("tidyr"))
ls(envir = asNamespace("tidyr")) %>% mget(asNamespace("tidyr"))
ls(envir = asNamespace("tidyr")) |> mget(asNamespace("tidyr"))
ls(envir = asNamespace("tidyr")) |> mget(asNamespace("tidyr")) %>%
purrr::keep(is.data.frame)
ls(envir = asNamespace("tidyr")) |> mget(asNamespace("tidyr")) |>
purrr::keep(is.data.frame)
ls(envir = asNamespace("tidyr")) |>
mget(asNamespace("tidyr")) |>
purrr::keep(is.data.frame)
ls(envir = asNamespace("tidyr")) |>
mget(asNamespace("tidyr")) |>
Filter(is.data.frame, x = _)
data(packge = "tidyr")
?data()
data(pacakge = "tidyr")
data(package = "tidyr")
library(tidyr)
billboard
cms_patient_care
construction
household
population
smiths
table1
table2
table5
us_rent_income
who
world_bank_pop
who2
? janitor::clean_names
?snakecase::to_any_case()
iris
sepal_cols <- all_cols[startsWith(all_cols, "Sepal")]
messy_df <- tibble(pupilNumber = 1:2, `cost 2022` = 1234)
library(dplyr)
relig_income_small %>% janitor::clean_names()
messy_df %>% janitor::clean_names()
messy_df <- tibble(pupilNumber = 1:2, `cost 2022` = 1234)
messy_df %>% janitor::clean_names()
messy_df %>% janitor::clean_names(case = "title", sep_out = "_")
messy_df <- tibble(
pupilNumber = 1:2,
`cost 2022` = 1234,
`% totalFunding` = c(0.5, 0.6)
)
messy_df
messy_df %>% janitor::clean_names()
messy_df %>% janitor::clean_names(case = "title", sep_out = "_")
messy_df <- tibble(
pupilNumber = 1:2,
`cost 2022` = 1234,
`% totalFunding` = c(0.4, 0.6),
`<half?` = c(TRUE, FALSE)
)
messy_df
messy_df %>% janitor::clean_names()
messy_df %>% janitor::clean_names(case = "title", sep_out = "_")
messy_df <- tibble(
pupilNumber = 1:2,
`cost 2022` = 1234,
`% totalFunding` = c(0.4, 0.6),
`<0.5?` = c(TRUE, FALSE)
)
messy_df <- tibble(
pupilNumber = 1:2,
`cost 2022` = 1234,
`% totalFunding` = c(0.4, 0.6),
`<50%` = c(TRUE, FALSE)
)
messy_df <- tibble(
pupilNumber = 1:2,
`cost 2022` = 1234,
`% totalFunding` = c(0.4, 0.6),
`<50% funding` = c(TRUE, FALSE)
)
messy_df
messy_df %>% janitor::clean_names()
messy_df %>% janitor::clean_names(case = "title", sep_out = "_")
?data.frame
?styler::style_file()
?styler::create_style_guide()
?styler::tidyverse_style
?styler::style_file
styler::style_file("messy_code.R", dry = "on")
styler::style_file("messy-code.R", dry = "on")
readr::read_file("messy-code.R")
readr::read_file("messy-code.R") %>% styler::create_style_guide()
readr::read_file("messy-code.R") %>% styler::style_text()
?styler::style_text
readr::read_file("messy-code.R") %>% styler::style_text() -> x
?styler::style_text
styler::tidyverse_style()
?styler::tidyverse_style()
?styler::create_style_guide
lintr::lint("messy-code.R")
?lintr::lint("messy-code.R")
lintr::lint("messy-code.R") -> x
x
str(x)
print(x)
class(x)
lintr:::print.lint
lintr:::print.lint(x)
class(X)
class(x)
?lintr::lint
lintr::lint("messy-code.R")
?range
?spread
tidyr::cms_patient_care
tidyr::population
tidyr::who2
tidyr::us_rent_income
spread(tidyr::us_rent_income)
tidyr::spread(tidyr::us_rent_income, key = variable, value = c(estimate, moe))
tidyr::spread(tidyr::us_rent_income, key = variable, value = moe)
tidyr::spread(tidyr::us_rent_income, key = variable, value =  estimate)
dplyr::select_(iris, Sepal.Width)
dplyr::select_(iris, "Sepal.Width")
band_members
cars
mtcars
fs::dir_tree()
styler:::style_selection()
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
as.numeric(x)
}
clean_numbers(c("£1.50", "2.3", "$3.50"))
clean_numbers(c("£1.50", "2.3", "$3.50", "hi!"))
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
as.numeric(x)
}
clean_numbers(c("£1.5", "£300", "$200"))
fails <- is.na(res) & !is.na(x)
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
out   <- suppressWarnings(as.numeric(x))
fails <- is.na(res) & !is.na(x)
if (any(fails)) {
warning(
"Failed to clean ", sum(fails), "entries\n",
"Check ", paste(x[fails], collapse = ", ")
)
}
out
}
clean_numbers(c("£1.5", "£300", "$200"))
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
out   <- suppressWarnings(as.numeric(x))
fails <- is.na(out) & !is.na(x)
if (any(fails)) {
warning(
"Failed to clean ", sum(fails), "entries\n",
"Check ", paste(x[fails], collapse = ", ")
)
}
out
}
clean_numbers(c("£1.5", "£300", "$200"))
clean_numbers(c("£1.5", "£300", "$200", "car"))
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
out   <- suppressWarnings(as.numeric(x))
fails <- is.na(out) & !is.na(x)
if (any(fails)) {
warning(
"Failed to clean ", sum(fails), "entries\n",
"Check ", paste0("'", x[fails], "'", collapse = ", ")
)
}
out
}
clean_numbers(c("£1.5", "£300", "$200", "car"))
clean_numbers(c("£1.5", "£300", "$200", "not a number", "harry"))
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
out   <- suppressWarnings(as.numeric(x))
fails <- is.na(out) & !is.na(x)
if (any(fails)) {
warning(
"Failed to clean ", sum(fails), " entries\n",
"Check ", paste0("'", x[fails], "'", collapse = ", "),
call. = FALSE
)
}
out
}
clean_numbers(c("£1.5", "£300", "$200", "not a number", "harry"))
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
x
}
clean_numbers(c("£1.5", "£300", "$200", "not a number"))
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
x
}
clean_numbers(c("£1.5", "£300", "$200", "not a number"))
clean_numbers <- function(x, remove = c("£", "$", "%")) {
stopifnot(is.character(x))
for (char in remove) {
x <- stringr::str_remove_all(x, stringr::fixed(char))
}
as.numeric(x)
}
clean_numbers(c("£1.5", "£300", "$200", "not a number"))
tibble::tribble(
~category, ~value,
"A", 1,
"A", 2,
"B", 3,
"C", 4
)
lintr::lint("interactive-example.R")
usethis::use_readme_md()
