---
title: "Styling R Code"
format: 
  revealjs:
    theme: [dark, custom.scss]
    code-line-numbers: false
execute: 
  echo: true
knitr:
  opts_chunk: 
    collapse: true
    comment: "#> "
highlight-style: arrow
---

# 01. What is code styling?

## 'Styling' covers...

::: {.incremental style="font-size:80%"}
-   Code/project structure (e.g. `01-modelling.R` -\> `02-plots.R` -\>
    `03-export.R` )

-   Code formatting

    -   Naming things (variables, columns, functions etc)
    -   Indentation/line breaks/spacing
    -   Stuff specific to R, e.g. `<-` vs `=`

-   Wider *principles* like...

    -   What does a good comment say?
    -   What is good code design?

-   Styling is about making your work easy to understand without
    changing its function
:::

------------------------------------------------------------------------

::: {.absolute top="200"}
> Good coding style is like correct punctuation: you can manage without
> it, butitsuremakesthingseasiertoread

\-*Introduction to the [Tidyverse Style
Guide](https://style.tidyverse.org/)*
:::

## Some specific benefits

::: {.incremental style="\"font-size:70%"}
-   Styling makes *writing* code easier (less decisions to make)

-   Styling makes *reading* code easier

-   Styling makes it easier to *avoid bugs*

::: columns
::: {.fragment .column width="50%"}
![Without styling](cat-crying.gif){height="200"}
:::

::: {.fragment .column width="50%"}
![With styling](cat-typing.gif){height="200"}
:::
:::
:::

## My styling journey

::: {.incremental style="font-size:65%"}
-   *2019*: Started coding in R

    -   Struggled to write clear code
    -   Often got frustrated by needing to rewrite stuff

-   *2020-2021*: Had *some* kind of set of conventions specific to
    myself

    -   Would occasionally change how I did something
    -   This made me dislike all the code I'd written previously
    -   This made me feel sad

-   *2022*: Started religiously following the [Tidyverse style
    guide](https://style.tidyverse.org/)

    -   My code needed less rewrites
    -   I spent almost no time thinking about styling (just design)
    -   My code was clearer
    -   This made me feel happy

-   *2023*: Life is great
:::

# 02. Some specific styling tips

## Naming things

::: {.incremental style="font-size:70%"}
-   Keep names as short as you can *while still being descriptive*.
    Prioritise being descriptive!
-   Only use abbreviations in special cases, e.g. acronyms
-   Don't use the name to signal the *type* of the object

::: {.fragment .columns}
::: {.column width="50%"}
```{r}
#| eval: false
#| filename: Bad

table_totalcost <- costs %>% 
  group_by(Category) %>% 
  summarise(Cost = sum(Cost))

model_for_use_later_on <- lm(Cost ~ Time, data = costs)

read_data_func <- function(path) {
  readr::read_csv(path, id = "filepath", na = "N/A")
}
```
:::

::: {.column width="50%"}
```{r}
#| eval: false
#| filename: Good

cost_totals <- costs %>% 
  group_by(Category) %>% 
  summarise(Cost = sum(Cost))

cost_model <- lm(Cost ~ Time, data = costs)

read_data <- function(path) {
  readr::read_csv(path, id = "filepath", na = "N/A")
}
```
:::
:::

-   Names for things like dataframes, vectors, values etc should be
    noun-like, e.g. `costs`, `costs_summary`, `costs_uplift_factor` etc

-   Names for functions should be verb-like, e.g. `filter()`,
    `standardise_names()` , `extract_coefficients()` etc
:::

## Name *case*

::: {style="font-size:70%"}
::: incremental
```{r}
#| code-line-numbers: "|1-2"

# snake_case
iris_summary <- summary(iris)

# Title_Snake_Case
Iris_Summary <- summary(iris)

# camelCase
irisSummary <- summary(iris)

# PascalCase
IrisSummary <- summary(iris)

# SCREAMING_SNAKE_CASE
IRIS_SUMMARY <- summary(iris)
```

-   Consistency should be prioritised above all else, but...
-   `lower_snake_case` should be preferred in most cases
-   `Title_Snake_Case` works well for column names
-   You might see `camelCase` in other packages, but you shouldn't use
    it unless you're doing serious object-oriented programming
:::
:::

::: notes
-   Exceptions to the `lower_snake_case` rule? Personally, no. I find,
    even with acronyms etc, things are much simpler if you follow this
    rule religiously.
:::

## Syntactic names

::: {.incremental style="font-size:70%"}
R has rules for names:

-   They must only include letters and numbers, and must start with a
    letter

-   Other names must be surrounded by backticks:

::: fragment
```{r}
#| eval: false
#| code-line-numbers: "1-2|4-5|7-8|10-11|1-11"

# Good ('syntactic')
iris_proportions <- mutate(iris, across(1:4, ~ . / sum(.)))

# Bad: starts with a number
`01_iris_proportions` <- mutate(iris, across(1:4, ~ . / sum(.)))

# Bad: contains a non-alphanumeric character
`iris_%s` <- mutate(iris, across(1:4, ~ . / sum(.)))

# Bad: contains a space
`iris proportions` <- mutate(iris, across(1:4, ~ . / sum(.)))
```
:::

-   When your data has non-syntactic column names, **clean these up
    ASAP!**

-   While names like `my.data` are allowed, avoid this naming style. Use
    `my_data` instead.
:::

## Indentation

::: {.incremental style="font-size:70%"}
::: columns
::: {.column width="40%"}
-   *Question:* Why indent?
-   *Answer:* Indentation shows **code structure** at a glance
-   Whenever you increase indentation, **do it by exactly 2 spaces**
-   This usually means that **all function arguments should have their
    own line**
:::

::: {.column width="60%"}
::: fragment
```{r}
#| eval: false
#| filename: "Bad"
 iris %>% 
 dplyr::mutate(Sepal.Area = Sepal.Width * Sepal.Length,
   Petal.Area = Petal.Width * Petal.Length) %>% 
  ggplot2::ggplot(aes(x = Sepal.Area, 
y = Petal.Area, colour = Species)) +
  ggplot2::geom_point()
```
:::

::: {style="font-size:5%"}
\
:::

::: fragment
```{r}
#| eval: false
#| filename: "Better"
iris %>% 
  dplyr::mutate(Sepal.Area = Sepal.Width * Sepal.Length,
                Petal.Area = Petal.Width * Petal.Length) %>% 
  ggplot2::ggplot(aes(x = Sepal.Area, 
                      y = Petal.Area, 
                      colour = Species)) +
  ggplot2::geom_point()
```
:::

::: {style="font-size:5%"}
\
:::

::: fragment
```{r}
#| eval: false
#| filename: "Best"
iris %>% 
  dplyr::mutate(
    Sepal.Area = Sepal.Width * Sepal.Length,
    Petal.Area = Petal.Width * Petal.Length
  ) %>% 
  ggplot2::ggplot(aes(
    x = Sepal.Area, 
    y = Petal.Area, 
    colour = Species
  )) +
  ggplot2::geom_point()
```
:::
:::
:::
:::

## Comments: what should they say?

::: {.incremental style="font-size:70%"}
::: columns
::: {.column width="40%"}
-   **Question:** How much should you comment?
-   **Answer:** As much as needed, *but no more*

::: fragment
If a comment is needed, it should explain the *why*, not the
*what*/*how* (if *what* your code does isn't clear, you should probably
rewrite it).
:::
:::

::: {.column width="60%"}
::: fragment
```{r}
#| eval: false
#| filename: "Bad"
#| code-line-numbers: "|5"

plot_data <- mtcars %>% 
  rownames_to_column("car") %>% 
  as_tibble() %>% 
  
  # Reorder car levels by values of mpg
  mutate(
    car = fct_reorder(car, mpg)
  )
```
:::

::: {style="font-size:5%"}
\
:::

::: fragment
```{r}
#| eval: false
#| filename: "Good"
#| code-line-numbers: "|5"

plot_data <- mtcars %>% 
  rownames_to_column("car") %>% 
  as_tibble() %>% 
  
  # Order cars by efficiency (mpg) for plotting later
  mutate(
    car = fct_reorder(car, mpg)
  )
```
:::
:::
:::
:::

## Comments: maximising clarity

::: {.incremental style="font-size:70%"}
::: {.fragment .columns}
::: {.column width="60%"}
```{r}
#| eval: false

plot_data <- mtcars %>% 
  
  # 1. Create a column for the car name
  rownames_to_column("car") %>% 
  
  # 2. Apply tibble format for nicer printing
  as_tibble() %>% 
  
  # 3. Order cars by efficiency (mpg) for plotting later
  mutate(car = fct_reorder(car, mpg))
```
:::

::: {.column width="40%"}
Number your comments if it makes sense
:::
:::

::: {style="font-size:5%"}
\
:::

::: {.fragment .columns}
::: {.column width="60%"}
```{r}
#| eval: false

# 1. Create a column for the car name
# 2. Apply tibble format for nicer printing
# 3. Order cars by efficiency (mpg) for plotting later
plot_data <- mtcars %>% 
  rownames_to_column("car") %>% 
  as_tibble() %>% 
  mutate(car = fct_reorder(car, mpg))
```
:::

::: {.column width="40%"}
Prefer infrequent, detailed comments over frequent ones which are overly
terse
:::
:::

::: {style="font-size:5%"}
\
:::

::: {.fragment .columns}
::: {.column width="60%"}
```{r}
#| eval: false
#| highlight-style: atom-one

# ~~ Prepare data for plotting ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 1. Create a column for the car name
# 2. Apply tibble format for nicer printing
# 3. Order cars by efficiency (mpg) for plotting later
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
plot_data <- mtcars %>% 
  rownames_to_column("car") %>% 
  as_tibble() %>% 
  mutate(car = fct_reorder(car, mpg))
```
:::

::: {.column width="40%"}
Fencing comments suggests a new 'section'. This can help guide the
reader to the most important information.
:::
:::
:::

## Comments: miscellaneous tips

::: {style="font-size:70%"}
-   Give each comment its own line unless there's a *really* good reason
    not to

-   Don't needlessly abbreviate things - use full sentences

-   Use the [*imperative
    mood*](https://en.wikipedia.org/wiki/Grammatical_mood)Â for short
    comments:

    -   Good (imperative mood):

        `# Remove rows where Cost is NA`

    -   Bad (indicative mood?):

        `# Removing rows where Cost is NA`

-   If your code is more than 50% comments consider switching to
    Quarto/R Markdown
:::

## Functions

::: {.incremental style="font-size:70%"}
-   Repeating code is bad - defining functions is the answer

-   This takes practice but makes code *much* easier to read and
    maintain

::: columns
::: {.fragment .column width="53%"}
```{r}
#| eval: false
#| filename: "Bad"
#| code-line-numbers: "|7"

# Rescale a, b, c, and d to be between 0 and 1
df %>% 
  mutate(
    a = (a - min(a, na.rm = TRUE)) / 
      (max(a, na.rm = TRUE) - min(a, na.rm = TRUE)),
    b = (b - min(b, na.rm = TRUE)) / 
      (max(b, na.rm = TRUE) - min(a, na.rm = TRUE)),
    c = (c - min(c, na.rm = TRUE)) / 
      (max(c, na.rm = TRUE) - min(c, na.rm = TRUE)),
    d = (d - min(d, na.rm = TRUE)) / 
      (max(d, na.rm = TRUE) - min(d, na.rm = TRUE)),
  )
```
:::

::: {.fragment .column width="47%"}
```{r}
#| eval: false
#| filename: "Better"
#| code-line-numbers: true
rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE, finite = TRUE)
  (x - min(x)) / (max(x) - min(x))
}

df %>% 
  mutate(
    a = rescale01(a),
    b = rescale01(b),
    c = rescale01(c),
    d = rescale01(d)
  )
```
:::
:::

::: {style="font-size:5%"}
\
:::

::: columns
::: {.fragment .column width="53%"}
```{r}
#| eval: false
#| filename: "Best"
#| code-line-numbers: true

# across() applies rescale01() to columns a to d
# This finally eliminates all code repetition!
df %>% 
  mutate(across(c(a, b, c, d), rescale01))
```
:::

<!-- Need a hidden column here to get the others to vertically align -->

::: {.column width="47%"}
::: content-hidden
```{r}
#| eval: false
#| filename: "Best"
#| code-line-numbers: true
df %>%
  mutate(across(a:d, rescale01))
```
:::
:::
:::
:::

## Files

## More miscellaneous tips

::: {.incremental style="font-size:70%"}
-   Always use `<-` for assignment, not `=` or `->`

-   You should (almost) never use `<<-` - there's (almost) always a
    better approach

-   Space stuff out! E.g. `1 / (a + b + c)` is better than `1/(a+b+c)`

-   Don't use `return()` if you don't need to

-   **Rewrite your code!** Code you write once and never change isn't
    likely to be very clear.
:::

# 03. Code Design

## What is design?

::: {.incremental style="font-size:70%"}
-   Design is about making your code consistent, composable and reusable

-   Styling can be boiled down to a set of rules - design is more of an
    art

-   In R, good code design is mostly about writing good functions

::: fragment
Example: `dplyr::select()` is a masterclass in design:

::: columns
::: {.column width="50%"}
```{r}
all_cols   <- colnames(iris)
sepal_cols <- all_cols[startsWith(all_cols, "Sepal")]
iris_small <- iris[c("Species", sepal_cols)]

head(iris_small, 5)
```
:::

::: {.column width="50%"}
```{r}
#| message: false

library(dplyr)

iris %>% 
  select(Species, starts_with("Sepal")) %>% 
  head(5)
```
:::
:::
:::

::: fragment
Both code chunks take the `iris` dataframe and select the `Species`
column plus all columns which begin with `"Sepal"`. Which is clearer?
:::
:::

# 04. Some useful tools

## `janitor::clean_names()`

::: {.columns style="font-size:69%"}
::: {.column width="30%"}
-   `clean_names()` is a very quick and easy way to make syntactic
    column names. Use it!

-   Getting Title_Snake_Case is possible, but not obvious from the
    documentation

-   Cleaning is lossy, so check the result
:::

::: {.column width="70%"}
```{r}
#| message: false
#| code-line-numbers: "|9-10,14-16,20-22"

messy_df <- data.frame(
  pupilNumber      = 1:2, 
  `cost 2022`      = 1234, 
  `% totalFunding` = c(0.4, 0.6),
  `<50% funding`   = c(TRUE, FALSE), 
  check.names = FALSE
)

messy_df

messy_df %>% 
  janitor::clean_names()

messy_df %>% 
  janitor::clean_names(case = "title", sep_out = "_")
```
:::
:::

## `styler::style_file()`

::: {style="font-size:70%"}
[{styler}](https://styler.r-lib.org/) is a powerful tool to use
sparingly. Some reasonable use-cases:

-   Re-style a project you inherit

-   Re-style your own old projects after seeing this presentation

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| filename: "messy-code.R"
#| file: "messy-code.R"
```
:::

::: {.column width="50%"}
```{r code=styler::style_text(readr::read_file("messy-code.R"))}
#| eval: false
#| filename: 'styler::style_file("messy-code.R")'
```
:::
:::
:::

## `lintr::lint_file()`

::: {style="font-size:70%"}
[{lintr}](https://lintr.r-lib.org/) is similar to {styler}, but it tells
you about issues instead of fixing them.

-   Good for maintaining already well-styled code, not so good for
    restyling old code

-   Highly customisable, e.g. if you want to relax/not apply some rules

-   RStudio's UI lets you click through to address individual lints

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| filename: "messy-code.R"
#| file: "messy-code.R"
#| code-line-numbers: true
```
:::

::: {.column width="50%"}
```{r}
#| eval: false
lintr::lint_file("messy-code.R")
```

![](lintr-rstudio-screenshot.png)
:::
:::
:::

## Built-in tools in RStudio

::: {style="font-size:70%"}
| Shortcut                 | Action                                             |
|---------------------------|---------------------------------------------|
| `Ctrl + I`               | Correct indentation                                |
| `Alt + Ctrl + Shift + M` | 'Rename in scope', e.g. change `myVar` to `my_var` |
| `Ctrl + Shift + F`       | Find (and replace) throughout multiple files       |
| `Ctrl + Shift + /`       | Wrap long comments over multiple lines             |
| `Alt + -`                | Insert `<-` with the correct spacing               |
| `Ctrl + Shift + M`       | Insert `%>%` with the correct spacing              |
| `Alt + Ctrl + Shift + R` | Inserts template function documentation            |
| `Ctrl + click/drag`      | Activate multiline cursor                          |

Note: You can use Tools -\> Keyboard Shortcuts Help for a full list of
shortcuts
:::

# 05. Resources

## Resources

-   The Tidyverse style guide: <https://style.tidyverse.org/>

-   The Tidyverse design guide: <https://design.tidyverse.org/>

-   The {styler} package: <https://styler.r-lib.org/>

-   The {lintr} package: <https://lintr.r-lib.org/>
